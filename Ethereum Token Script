from web3 import Web3
import json

# Подключение к Ethereum-узлу
INFURA_URL = "https://mainnet.infura.io/v3/YOUR_INFURA_PROJECT_ID"
web3 = Web3(Web3.HTTPProvider(INFURA_URL))

if not web3.isConnected():
    raise ConnectionError("Failed to connect to Ethereum node")

# Адрес контракта ERC-20 токена и ABI
TOKEN_ADDRESS = "0xdAC17F958D2ee523a2206206994597C13D831ec7"  # Пример: USDT
TOKEN_ABI = json.loads('[{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"}],"name":"balanceOf","outputs":[{"name":"balance","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}]')

# Подключение к контракту
contract = web3.eth.contract(address=Web3.to_checksum_address(TOKEN_ADDRESS), abi=TOKEN_ABI)

def get_token_balance(address):
    """Получить баланс токенов ERC-20"""
    try:
        balance = contract.functions.balanceOf(Web3.to_checksum_address(address)).call()
        decimals = contract.functions.decimals().call()
        return balance / (10 ** decimals)
    except Exception as e:
        print(f"Error fetching balance: {e}")
        return None

def send_transaction(private_key, to_address, amount):
    """Отправить токены ERC-20"""
    from_address = web3.eth.account.privateKeyToAccount(private_key).address
    nonce = web3.eth.getTransactionCount(from_address)

    transaction = contract.functions.transfer(
        Web3.to_checksum_address(to_address),
        int(amount * (10 ** contract.functions.decimals().call()))
    ).buildTransaction({
        'chainId': 1,  # Mainnet
        'gas': 70000,
        'gasPrice': web3.toWei('10', 'gwei'),
        'nonce': nonce
    })

    signed_tx = web3.eth.account.signTransaction(transaction, private_key)
    tx_hash = web3.eth.sendRawTransaction(signed_tx.rawTransaction)
    return web3.toHex(tx_hash)

if __name__ == "__main__":
    # Пример использования
    user_address = "0xYourEthereumAddressHere"
    balance = get_token_balance(user_address)
    if balance is not None:
        print(f"Balance: {balance} tokens")

    # Пример отправки транзакции
    # private_key = "0xYourPrivateKeyHere"
    # to_address = "0xRecipientAddressHere"
    # amount = 10.0
    # tx_hash = send_transaction(private_key, to_address, amount)
    # print(f"Transaction hash: {tx_hash}")
